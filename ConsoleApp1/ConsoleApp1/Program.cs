using System.Text.Json;
using PricingLibrary;
using PricingLibrary.DataClasses;
using PricingLibrary.RebalancingOracleDescriptions;

using CsvHelper;
using System.IO;
using System.Globalization;
using System.Linq;
using System.Dynamic;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using PricingLibrary.MarketDataFeed;
using PricingLibrary.Computations;
using PricingLibrary.TimeHandler;
using MathNet.Numerics.Statistics;

namespace DeserializeExtra
{

    public class Handler
    {


        public static TestParameters JsonHandler(string path, string fileName)
        {
            string jsonString = File.ReadAllText(path + "\\" + fileName);
            var options = new JsonSerializerOptions
            {
                Converters = { new RebalancingOracleDescriptionConverter() }
            };
            var testParameters = JsonSerializer.Deserialize<TestParameters>(jsonString, options);
            return testParameters;
        }



        public static List<DataFeed> CsvHandler(string path, string csvFile, int numberOfShares)
        {
            string[] rawCsv = System.IO.File.ReadAllLines(path + "\\" + csvFile);
            var allDataFeeds = new List<DataFeed>();
            for (int i = 1; i < rawCsv.Length / numberOfShares; i += numberOfShares)
            {
                string[] rowData = rawCsv[i].Split(',');
                DateTime currentDate = Convert.ToDateTime(rowData[1] + " AM");
                Dictionary<string, double> priceList = new Dictionary<string, double>();
                for (int j = 0; j < numberOfShares; j++)
                {
                    rowData = rawCsv[i + j].Split(',');
                    priceList.Add(rowData[0], Convert.ToDouble(rowData[2]));
                }
                DataFeed blockDataFeed = new DataFeed(currentDate, priceList);

                allDataFeeds.Add(blockDataFeed);
            }
            return allDataFeeds;
        }


        public static double[] SpotsArray(DataFeed dataFeed)
        {
            int numberOfShares = dataFeed.PriceList.Count;
            double[] allSpots = new double[numberOfShares];
            for (int i = 0; i < dataFeed.PriceList.Count; i++)
            {
                double spot = dataFeed.PriceList.ElementAt(i).Value;
                allSpots[i] = spot;
            }
            return allSpots;
        }  

        public static bool RebalancingTime(DateTime date)
        {
            return date.DayOfWeek == DayOfWeek.Monday;
        }

        public static double SharesQuantity(double[] updatedWeights, double[] spots)
        {
            double sumOfQuantities = 0;
            for(int i = 0; i < updatedWeights.Length; i++)
            {
                sumOfQuantities += updatedWeights[i] * spots[i];
            }
            return sumOfQuantities;
        }


        //marketData : list of data feeds generated by CsvHandler
        public static List<double> PortfolioValues(TestParameters testParameters, List<DataFeed> marketData) 
        {
            //premium computing
            Pricer pricer = new Pricer(testParameters);
            DateTime initialDate = marketData[0].Date;
            double initialTimeToMaturity = MathDateConverter.ConvertToMathDistance(initialDate, testParameters.BasketOption.Maturity);
            DataFeed initialDataFeed = marketData[0];
            double[] initialSpots = SpotsArray(initialDataFeed);
            PricingResults initialPriceResult = pricer.Price(initialTimeToMaturity, initialSpots);
            double[] deltas = initialPriceResult.Deltas;
            double premium = initialPriceResult.Price;

            //looping
            List<double> portfolio = new List<double>();
            //portfolio.Add(premium);
            foreach(DataFeed dataFeed in marketData)
            {
                if (!dataFeed.Equals(initialDataFeed)) {
                    double[] spots = SpotsArray(dataFeed);
                    double timeToMaturity = MathDateConverter.ConvertToMathDistance(dataFeed.Date, testParameters.BasketOption.Maturity);
                    PricingResults priceResult = pricer.Price(timeToMaturity, spots);
                    double riskFreeRate = RiskFreeRateProvider.GetRiskFreeRateAccruedValue(dataFeed.Date, testParameters.BasketOption.Maturity);
                    double portfolioValue = (premium - SharesQuantity(deltas, initialSpots)) * riskFreeRate + SharesQuantity(deltas, spots); 
                    //Don't forget the rebalancing ; discarded for now
                    premium = priceResult.Price;
                    deltas = priceResult.Deltas;
                    initialSpots = spots;
                    portfolio.Add(portfolioValue);
                }
            }
            return portfolio;
        }
        public static void Main()
        {
            string path = "C:\\Users\\sbend\\Desktop\\ensimag\\c#\\systematic-strategies";
            string fileName = "TestParameters\\share_5_strike_11.json";
            var testParameters = JsonHandler(path, fileName);
            var marketData = CsvHandler("C:\\Users\\sbend\\Desktop\\ensimag\\c#\\systematic-strategies", "MarketData\\data_share_5_2.csv", 5);
            //Console.WriteLine($"{testParameters.BasketOption.UnderlyingShareIds[0]}");
            Console.WriteLine($"{marketData[1].PriceList["share_3"]}");
            var portfolio = PortfolioValues(testParameters, marketData);
            Console.WriteLine($"{portfolio[7]}");
        }

            
    }
}

